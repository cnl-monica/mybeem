#! /bin/sh
### BEGIN INIT INFO
# Provides:         mybeem
# Required-Start:   $network
# Required-Stop:    
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: mybeem fetcher
# Description:       This bash script takes care of starting, stopping and restarting mybeem.
#                    For more information try man page mybeem or visit our project homepage: http://www.wiki.cnl.tuke.sk/Monica/WebHome
### END INIT INFO

# Author: Lubos Husivarga <hlsm4n@gmail.com>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="mybeem fetcher"
NAME=mybeem
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
SCRIPTNAME=/etc/init.d/$NAME
CONF_DIR=/etc/mybeem
LOG_DIR=/var/log/mybeem

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
    for i in `ls  $CONF_DIR | grep ".xml$"`; do
	
        PIDFILE="/var/run/$NAME.$i.pid"
	CURRENT_DATETIME=$(date '+%Y-%m-%d-%H-%M-%S')
	touch $LOG_DIR/log-$CURRENT_DATETIME-${i%.xml*}.log
	LOGFILE=$LOG_DIR/log-$CURRENT_DATETIME-${i%.xml*}.log

	    start-stop-daemon --start --quiet -b -m --pidfile $PIDFILE --exec $DAEMON --test > /dev/null
        if [ $? -ne 0 ]; then
            echo "ALREADY RUNNING $NAME with config $CONF_DIR/$i  pid `cat $PIDFILE`"
            continue
        fi	        

       	start-stop-daemon --start --quiet -b -m --pidfile $PIDFILE --exec $DAEMON -- -c $CONF_DIR/$i -l $LOGFILE
        if [ $? -ne 0 ]; then
            echo "ERROR $NAME can't be started with config $CONF_DIR/$i"
            continue
        fi
        
        sleep 1 
        echo "STARTED $NAME with config $CONF_DIR/$i and logfile $LOGFILE pid `cat $PIDFILE`"

    done
    return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
    ls /var/run/$NAME*pid > /dev/null 2>&1
    [ $? -ne 0 ] && return 2
    for i in `ls /var/run/$NAME*pid`; do
        PIDFILE=$i
        start-stop-daemon --stop --quiet --retry=INT/30/INT/5 --pidfile $PIDFILE --name $NAME
        RETVAL="$?"
        
        if [ $RETVAL -eq 1 ]; then
            echo "ALREADY STOPPED $NAME with  pid `cat $PIDFILE`"
            rm -f $PIDFILE
            continue
        fi
        
        [ "$RETVAL" = 2 ] && return 2
        
        echo "STOPPED $NAME with config $CONF pid `cat $PIDFILE`"
        rm -f $PIDFILE
    done

	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2

	return "$RETVAL"
}


case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	#log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
